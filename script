-- Load required libraries
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Game services
local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")
local userInput = game:GetService("UserInputService")
local httpService = game:GetService("HttpService")

-- Variables
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Auto farm settings
local autoFarm = false
local autoAttack = false
local abilityActive = false
local weaponEquipped = false
local HIT_RANGE = 10
local orbitRadius = 10
local orbitAngle = 0
local heightOffset = 2.5
local attackDelay = 0.1
local saveFileName = "AutoFarmSettings.json"

-- Create Fluent Window
local Window = Fluent:CreateWindow({
    Title = "Auto Farm Pro " .. Fluent.Version,
    SubTitle = "Ultimate Farm Helper",
    TabWidth = 160,
    Size = UDim2.fromOffset(600, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl
})

-- Create tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "sword" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    About = Window:AddTab({ Title = "Info", Icon = "info" })
}

-- Initialize Options
local Options = Fluent.Options

-- Core functions
local function getClosestMob()
    local closestMob = nil
    local closestDistance = math.huge
    
    -- Search through all workspace children
    for _, mob in ipairs(workspace:GetChildren()) do
        if mob:IsA("Model") and mob ~= character and mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
            local dist = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
            if dist < closestDistance then
                closestDistance = dist
                closestMob = mob
            end
        end
    end
    
    return closestMob, closestDistance
end

local function isInRange(mob, range)
    if not mob or not mob:FindFirstChild("HumanoidRootPart") or not humanoidRootPart then 
        return false 
    end
    return (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude <= range
end

local function equipWeapon()
    local args = {
        [1] = "Equip/UnEquip"
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("WeaponsEvent"):FireServer(unpack(args))
    weaponEquipped = true
end

local function useSkill(skillName)
    local mob = getClosestMob()
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then return end
    
    local targetPosition = mob.HumanoidRootPart.Position
    
    local args = {
        [1] = { ["Skill"] = skillName, ["Function"] = "Activate" },
        [2] = targetPosition,
        [3] = true
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):FireServer(unpack(args))
end

-- Improved attack enemy function with multiple attack methods
local function attackEnemy()
    local mob, distance = getClosestMob()
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then return end
    
    -- Don't attack if too far away
    if distance > HIT_RANGE * 1.5 then return end

    -- Get target parts for better hit registration
    local targetParts = {"HumanoidRootPart", "Torso", "UpperTorso", "Head", "LowerTorso"}
    local targetPart = nil
    
    for _, partName in ipairs(targetParts) do
        targetPart = mob:FindFirstChild(partName)
        if targetPart then break end
    end
    
    if not targetPart then return end
    
    -- Ensure weapon is equipped
    if not weaponEquipped then
        equipWeapon()
    end
    
    -- Multiple attack methods to ensure compatibility with various games
    
    -- Method 1: Basic attack
    pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Combat"):FireServer("Attack")
    end)
    
    -- Method 2: Specific target attack
    pcall(function()
        local args = {
            [1] = "Attack",
            [2] = mob,
            [3] = targetPart.Position
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Combat"):FireServer(unpack(args))
    end)
    
    -- Method 3: Position-based attack
    pcall(function()
        local args = {
            [1] = "Attack",
            [2] = targetPart.Position
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Combat"):FireServer(unpack(args))
    end)
    
    -- Method 4: WeaponAttack event
    pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("WeaponAttack"):FireServer(mob)
    end)
    
    -- Look at mob to improve attack reliability
    humanoidRootPart.CFrame = CFrame.lookAt(humanoidRootPart.Position, targetPart.Position)
end

-- Attack loop function
local attackLoopRunning = false
local function startAttackLoop()
    if attackLoopRunning then return end
    attackLoopRunning = true
    
    spawn(function()
        while autoAttack or autoFarm do
            attackEnemy()
            task.wait(attackDelay)
            if not (autoAttack or autoFarm) then break end
        end
        attackLoopRunning = false
    end)
end

-- Orbit connection for moving around target
local orbitConnection = nil
local function startOrbiting()
    if orbitConnection then orbitConnection:Disconnect() end
    
    orbitConnection = runService.Heartbeat:Connect(function()
        local mob = getClosestMob()
        if mob and mob:FindFirstChild("HumanoidRootPart") and autoFarm then
            if not autoAttack then
                -- Start attacking when auto farm is enabled
                autoAttack = true
                startAttackLoop()
            end
            
            humanoidRootPart.Anchored = false
            
            orbitAngle = orbitAngle + 2.5
            if orbitAngle >= 360 then orbitAngle = 0 end
            
            local angle = math.rad(orbitAngle)
            local x = math.cos(angle) * orbitRadius
            local z = math.sin(angle) * orbitRadius
            
            local mobPosition = mob.HumanoidRootPart.Position
            local targetPosition = mobPosition + Vector3.new(x, heightOffset, z)
            
            -- Look at the mob while orbiting to improve attack accuracy
            humanoidRootPart.CFrame = CFrame.new(targetPosition, mobPosition)
            humanoidRootPart.Anchored = true
        end
    end)
end

local function stopAutoFarm()
    autoFarm = false
    if not autoAttack then
        attackLoopRunning = false
    end
    humanoidRootPart.Anchored = false
    if orbitConnection then orbitConnection:Disconnect() end
end

-- Ability loop
local abilityLoop = nil
local function toggleAbility(isEnabled)
    abilityActive = isEnabled
    if isEnabled then
        if not abilityLoop then
            abilityLoop = spawn(function()
                while abilityActive do
                    useSkill("FlurryOfBlows")
                    task.wait(0.3)
                    useSkill("BloodyCut")
                    task.wait(0.3)
                    useSkill("Invisibility")
                    task.wait(0.4)
                end
            end)
        end
    else
        abilityActive = false
        abilityLoop = nil
    end
end

-- Save/Load Settings
local function saveSettings()
    local settings = {
        autoFarm = autoFarm,
        autoAttack = autoAttack,
        abilityActive = abilityActive,
        orbitRadius = orbitRadius,
        heightOffset = heightOffset,
        attackDelay = attackDelay,
        HIT_RANGE = HIT_RANGE
    }
    
    pcall(function()
        writefile(saveFileName, httpService:JSONEncode(settings))
    end)
end

local function loadSettings()
    local success, settings = pcall(function()
        if isfile(saveFileName) then
            return httpService:JSONDecode(readfile(saveFileName))
        end
        return nil
    end)
    
    if success and settings then
        autoFarm = settings.autoFarm or false
        autoAttack = settings.autoAttack or false
        abilityActive = settings.abilityActive or false
        orbitRadius = settings.orbitRadius or 10
        heightOffset = settings.heightOffset or 2.5
        attackDelay = settings.attackDelay or 0.1
        HIT_RANGE = settings.HIT_RANGE or 10
        
        return true
    end
    return false
end

-- Initialize settings
pcall(loadSettings)

-- UI Components
-- Main Tab
Tabs.Main:AddParagraph({
    Title = "Welcome to Auto Farm Pro",
    Content = "The ultimate farming solution. Toggle features below to begin."
})

local AutoFarmToggle = Tabs.Main:AddToggle("AutoFarm", {
    Title = "Auto Farm",
    Description = "Automatically orbit and attack nearby enemies",
    Default = autoFarm
})

AutoFarmToggle:OnChanged(function(Value)
    autoFarm = Value
    if Value then
        if not weaponEquipped then
            equipWeapon()
        end
        startOrbiting()
        -- Auto-enable attack when farm is enabled
        Options.AutoAttack:SetValue(true)
    else
        stopAutoFarm()
    end
    saveSettings()
end)

local AutoAttackToggle = Tabs.Main:AddToggle("AutoAttack", {
    Title = "Auto Attack",
    Description = "Automatically attack without orbiting",
    Default = autoAttack
})

AutoAttackToggle:OnChanged(function(Value)
    autoAttack = Value
    if Value then
        if not weaponEquipped then
            equipWeapon()
        end
        startAttackLoop()
    end
    saveSettings()
})

local AbilityToggle = Tabs.Main:AddToggle("AutoAbility", {
    Title = "Auto Ability",
    Description = "Automatically use abilities",
    Default = abilityActive
})

AbilityToggle:OnChanged(function(Value)
    toggleAbility(Value)
    saveSettings()
})

local EquipButton = Tabs.Main:AddButton({
    Title = "Equip Weapon",
    Description = "Manually equip your weapon",
    Callback = function()
        equipWeapon()
        Fluent:Notify({
            Title = "Weapon",
            Content = "Weapon equipped successfully",
            Duration = 3
        })
    end
})

Tabs.Main:AddButton({
    Title = "Find Closest Mob",
    Description = "Locate and display the closest mob",
    Callback = function()
        local mob, distance = getClosestMob()
        if mob then
            Fluent:Notify({
                Title = "Found Mob",
                Content = "Closest mob: " .. (mob.Name or "Unknown") .. " (Distance: " .. math.floor(distance) .. ")",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "No Mobs Found",
                Content = "Could not find any mobs nearby",
                Duration = 3
            })
        end
    end
})

-- Settings Tab
local RadiusSlider = Tabs.Settings:AddSlider("OrbitRadius", {
    Title = "Orbit Radius",
    Description = "Distance to orbit around mobs",
    Default = orbitRadius,
    Min = 5,
    Max = 20,
    Rounding = 1,
    Callback = function(Value)
        orbitRadius = Value
        saveSettings()
    end
})

local HeightSlider = Tabs.Settings:AddSlider("HeightOffset", {
    Title = "Height Offset",
    Description = "Height above mob",
    Default = heightOffset,
    Min = 0,
    Max = 10,
    Rounding = 0.5,
    Callback = function(Value)
        heightOffset = Value
        saveSettings()
    end
})

local AttackDelaySlider = Tabs.Settings:AddSlider("AttackDelay", {
    Title = "Attack Delay",
    Description = "Delay between attacks",
    Default = attackDelay,
    Min = 0.05,
    Max = 1,
    Rounding = 0.05,
    Callback = function(Value)
        attackDelay = Value
        saveSettings()
    end
})

local HitRangeSlider = Tabs.Settings:AddSlider("HitRange", {
    Title = "Hit Range",
    Description = "Maximum attack range",
    Default = HIT_RANGE,
    Min = 5,
    Max = 20,
    Rounding = 1,
    Callback = function(Value)
        HIT_RANGE = Value
        saveSettings()
    end
})

Tabs.Settings:AddButton({
    Title = "Save Settings",
    Description = "Save current configuration",
    Callback = function()
        saveSettings()
        Fluent:Notify({
            Title = "Settings Saved",
            Content = "Your settings have been saved successfully",
            Duration = 3
        })
    end
})

Tabs.Settings:AddButton({
    Title = "Load Settings",
    Description = "Load saved configuration",
    Callback = function()
        if loadSettings() then
            -- Update UI elements
            Options.AutoFarm:SetValue(autoFarm)
            Options.AutoAttack:SetValue(autoAttack)
            Options.AutoAbility:SetValue(abilityActive)
            Options.OrbitRadius:SetValue(orbitRadius)
            Options.HeightOffset:SetValue(heightOffset)
            Options.AttackDelay:SetValue(attackDelay)
            Options.HitRange:SetValue(HIT_RANGE)
            
            Fluent:Notify({
                Title = "Settings Loaded",
                Content = "Your settings have been loaded successfully",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Load Failed",
                Content = "No saved settings found or error loading",
                Duration = 3
            })
        end
    end
})

-- About Tab
Tabs.About:AddParagraph({
    Title = "Auto Farm Pro",
    Content = "Version 2.0\nA professional auto farming solution.\n\nFeatures include automatic orbiting, attacking, ability usage, and customizable settings."
})

Tabs.About:AddParagraph({
    Title = "How to Use",
    Content = "1. Enable Auto Farm to automatically orbit and attack nearby mobs\n2. Use Settings to customize orbit distance, height, and attack delay\n3. Toggle Auto Ability to use skills automatically"
})

-- Integrate SaveManager and InterfaceManager
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({"AutoFarm", "AutoAttack", "AutoAbility"})

InterfaceManager:SetFolder("AutoFarmPro")
SaveManager:SetFolder("AutoFarmPro/ConfigUI")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Final setup
Window:SelectTab(1)

-- Load auto-load config if available
SaveManager:LoadAutoloadConfig()

Fluent:Notify({
    Title = "Auto Farm Pro",
    Content = "Script loaded successfully!",
    Duration = 5
})

-- Handle character respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Re-enable features if they were active
    if autoFarm then
        weaponEquipped = false
        task.wait(1)
        equipWeapon()
        startOrbiting()
    elseif autoAttack then
        weaponEquipped = false
        task.wait(1)
        equipWeapon()
        startAttackLoop()
    end
    
    if abilityActive then
        toggleAbility(true)
    end
})

-- Apply settings immediately if enabled
if autoFarm then
    equipWeapon()
    startOrbiting()
elseif autoAttack then
    equipWeapon()
    startAttackLoop()
end

if abilityActive then
    toggleAbility(true)
end
