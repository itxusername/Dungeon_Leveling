-- Load Wind UI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

-- Player setup
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)

if not humanoidRootPart then
    warn("HumanoidRootPart not found")
    return
end

-- Config system
local saveFilePath = "workspace/Settings.txt"

local function loadSettings()
    if not isfolder("workspace") then
        makefolder("workspace")
    end
    
    local success, data = pcall(function()
        if isfile(saveFilePath) then
            return HttpService:JSONDecode(readfile(saveFilePath))
        end
        return {}
    end)
    return success and data or {}
end

local function saveSettings(settings)
    if not isfolder("workspace") then
        makefolder("workspace")
    end
    
    pcall(function()
        writefile(saveFilePath, HttpService:JSONEncode(settings))
    end)
end

local savedSettings = loadSettings()

-- Core variables
local AutoFarmCore = {
    enabled = false,
    weaponEquipped = false,
    autoAttackLoop = nil,
    teleportConnection = nil,
}

-- Settings
local Settings = {
    attackDelay = savedSettings.attackDelay or 0.1,
    hitRange = savedSettings.hitRange or 15,
    heightOffset = savedSettings.heightOffset or -3,
    autoAbility = savedSettings.autoAbility or false,
    selectedSkills = savedSettings.selectedSkills or {"FlurryOfBlows", "BloodyCut", "Invisibility"},
}

-- NPC blacklist
local npcBlacklist = {
    ["Louis"] = true,
    ["Louis (NPC)"] = true,
    ["Louis (NPC) [1]"] = true,
}

-- Utility functions
local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        warn("Safe call failed: " .. tostring(result))
    end
    return success, result
end

local function getEvents()
    local events = ReplicatedStorage:FindFirstChild("Events")
    if not events then
        warn("Events not found")
        return nil
    end
    return events
end

-- Enhanced targeting
local function isValidTarget(mob)
    if not mob or not mob:IsA("Model") or mob == character then
        return false
    end
    
    local mobName = mob.Name
    if npcBlacklist[mobName] or 
       string.find(mobName:lower(), "npc") or 
       string.find(mobName:lower(), "shop") or 
       string.find(mobName:lower(), "vendor") or
       string.find(mobName:lower(), "merchant") then
        return false
    end
    
    local hrp = mob:FindFirstChild("HumanoidRootPart")
    local humanoid = mob:FindFirstChild("Humanoid")
    
    if not hrp or not humanoid then
        return false
    end
    
    if humanoid.Health <= 0 or humanoid.MaxHealth <= 0 or
       humanoid.PlatformStand or humanoid:GetState() == Enum.HumanoidStateType.Dead then
        return false
    end
    
    return true
end

local function getClosestMob()
    local closestMob = nil
    local closestDistance = math.huge
    
    local charactersFolder = workspace:FindFirstChild("Characters")
    if not charactersFolder then
        return nil, math.huge
    end
    
    for _, mob in ipairs(charactersFolder:GetChildren()) do
        if isValidTarget(mob) then
            local distance = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestMob = mob
            end
        end
    end
    
    return closestMob, closestDistance
end

local function equipWeapon()
    if AutoFarmCore.weaponEquipped then return end
    
    safeCall(function()
        local events = getEvents()
        if events then
            local weaponEvent = events:FindFirstChild("WeaponsEvent")
            if weaponEvent then
                weaponEvent:FireServer("Equip/UnEquip")
                AutoFarmCore.weaponEquipped = true
            end
        end
    end)
end

-- Better teleport system for server recognition
local function teleportToMob(mob)
    if not mob or not mob:FindFirstChild("HumanoidRootPart") or not humanoidRootPart then
        return false
    end
    
    safeCall(function()
        local mobPosition = mob.HumanoidRootPart.Position
        local targetPosition = mobPosition + Vector3.new(0, Settings.heightOffset, 0)
        
        -- Force server to recognize position using multiple methods
        humanoidRootPart.Anchored = false
        humanoidRootPart.CFrame = CFrame.new(targetPosition)
        
        -- Network ownership approach
        local bodyPosition = humanoidRootPart:FindFirstChild("BodyPosition")
        if not bodyPosition then
            bodyPosition = Instance.new("BodyPosition")
            bodyPosition.MaxForce = Vector3.new(4000, 4000, 4000)
            bodyPosition.Parent = humanoidRootPart
        end
        bodyPosition.Position = targetPosition
        
        -- Use Humanoid for server-side movement
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.PlatformStand = true
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            task.wait(0.1)
            humanoid.PlatformStand = false
            humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
        
        -- Clean up and finalize
        task.wait(0.05)
        if bodyPosition then
            bodyPosition:Destroy()
        end
        humanoidRootPart.CFrame = CFrame.new(targetPosition, mobPosition)
        humanoidRootPart.Anchored = true
    end)
    
    return true
end

local function attackEnemy()
    local mob, distance = getClosestMob()
    if not mob or distance > Settings.hitRange then
        return false
    end
    
    if not AutoFarmCore.weaponEquipped then
        equipWeapon()
        task.wait(0.2)
    end
    
    -- Ensure close positioning
    if distance > 8 then
        teleportToMob(mob)
        task.wait(0.1)
    end
    
    -- Verify position after teleport
    local newDistance = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
    if newDistance > Settings.hitRange then
        return false
    end
    
    safeCall(function()
        local args = {"Attack"}
        ReplicatedStorage:WaitForChild("Events"):WaitForChild("Combat"):FireServer(unpack(args))
    end)
    
    return true
end

local function useSkill(skillName)
    local mob = getClosestMob()
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then return end
    
    local targetPosition = mob.HumanoidRootPart.Position
    
    safeCall(function()
        local events = getEvents()
        if events then
            local skillEvent = events:FindFirstChild("Skill")
            if skillEvent then
                skillEvent:FireServer(
                    {["Skill"] = skillName, ["Function"] = "Activate"},
                    targetPosition,
                    true
                )
            end
        end
    end)
end

-- Main auto farm system
local function startAutoFarm()
    if AutoFarmCore.enabled then return end
    
    AutoFarmCore.enabled = true
    AutoFarmCore.weaponEquipped = false
    equipWeapon()
    
    -- Position loop
    AutoFarmCore.teleportConnection = RunService.Heartbeat:Connect(function()
        if not AutoFarmCore.enabled then return end
        
        local mob = getClosestMob()
        if mob then
            local distance = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
            if distance > 10 then
                teleportToMob(mob)
            end
        end
    end)
    
    -- Attack loop
    AutoFarmCore.autoAttackLoop = task.spawn(function()
        while AutoFarmCore.enabled do
            local success = attackEnemy()
            task.wait(success and 0.2 or 0.1)
        end
    end)
    
    -- Ability loop
    if Settings.autoAbility then
        task.spawn(function()
            while AutoFarmCore.enabled and Settings.autoAbility do
                for _, skill in ipairs(Settings.selectedSkills) do
                    if not AutoFarmCore.enabled then break end
                    useSkill(skill)
                    task.wait(0.5)
                end
                task.wait(1)
            end
        end)
    end
end

local function stopAutoFarm()
    AutoFarmCore.enabled = false
    
    if AutoFarmCore.teleportConnection then
        AutoFarmCore.teleportConnection:Disconnect()
        AutoFarmCore.teleportConnection = nil
    end
    
    if humanoidRootPart then
        safeCall(function()
            humanoidRootPart.Anchored = false
            local bodyPosition = humanoidRootPart:FindFirstChild("BodyPosition")
            if bodyPosition then
                bodyPosition:Destroy()
            end
        end)
    end
end

-- UI Creation
local Window = WindUI:CreateWindow({
    Title = "Auto Farm Pro",
    Icon = "zap",
    Author = "Farm Helper",
    Folder = "AutoFarmPro",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    ScrollBarEnabled = true,
    User = {
        Enabled = true,
        Anonymous = false,
    },
})

local MainTab = Window:Tab({
    Title = "Main Farm",
    Icon = "zap",
})

-- Controls
local AutoFarmToggle = MainTab:Toggle({
    Title = "Auto Farm",
    Desc = "Enable unified auto farming",
    Icon = "play",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        if state then
            startAutoFarm()
        else
            stopAutoFarm()
        end
    end
})

local AttackDelaySlider = MainTab:Slider({
    Title = "Attack Delay",
    Step = 0.05,
    Value = {
        Min = 0.05,
        Max = 1.0,
        Default = Settings.attackDelay,
    },
    Callback = function(value)
        Settings.attackDelay = value
        saveSettings(Settings)
    end
})

local HitRangeSlider = MainTab:Slider({
    Title = "Hit Range",
    Step = 1,
    Value = {
        Min = 5,
        Max = 30,
        Default = Settings.hitRange,
    },
    Callback = function(value)
        Settings.hitRange = value
        saveSettings(Settings)
    end
})

local HeightOffsetSlider = MainTab:Slider({
    Title = "Height Offset",
    Step = 0.5,
    Value = {
        Min = -10,
        Max = 5,
        Default = Settings.heightOffset,
    },
    Callback = function(value)
        Settings.heightOffset = value
        saveSettings(Settings)
    end
})

local AutoAbilityToggle = MainTab:Toggle({
    Title = "Auto Abilities",
    Desc = "Use selected skills automatically",
    Icon = "sparkles",
    Type = "Checkbox",
    Default = Settings.autoAbility,
    Callback = function(state)
        Settings.autoAbility = state
        saveSettings(Settings)
        if AutoFarmCore.enabled then
            stopAutoFarm()
            task.wait(0.1)
            startAutoFarm()
        end
    end
})

local SkillDropdown = MainTab:Dropdown({
    Title = "Skills to Use",
    Values = {"FlurryOfBlows", "BloodyCut", "Invisibility", "RapidStrike", "DeathBlow", "ShadowStep", "HealingAura"},
    Value = Settings.selectedSkills,
    Multi = true,
    AllowNone = false,
    Callback = function(skills)
        Settings.selectedSkills = {}
        for skill, selected in pairs(skills) do
            if selected then
                table.insert(Settings.selectedSkills, skill)
            end
        end
        saveSettings(Settings)
    end
})

-- Character respawn handling
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
    
    if not humanoidRootPart then
        warn("Failed to get HumanoidRootPart after respawn")
        return
    end
    
    AutoFarmCore.weaponEquipped = false
    
    if AutoFarmCore.enabled then
        task.wait(2)
        stopAutoFarm()
        task.wait(0.5)
        startAutoFarm()
    end
end)

-- Cleanup
game:GetService("GuiService").ErrorMessageChanged:Connect(function()
    if AutoFarmCore.enabled then
        stopAutoFarm()
    end
end)

-- Auto-save
task.spawn(function()
    while task.wait(30) do
        saveSettings(Settings)
    end
end)

print("Auto Farm Pro loaded - Enhanced server detection")
Window:SelectTab(1)
