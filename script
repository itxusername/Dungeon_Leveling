-- Load Wind UI
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Game Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Player and Character
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)

if not humanoidRootPart then
    warn("HumanoidRootPart not found. Ensure your character has loaded properly.")
    return
end

-- Auto Farm Core Variables
local AutoFarmCore = {
    enabled = false,
    weaponEquipped = false,
    attackDelay = 0.1,
    hitRange = 15,
    heightOffset = -3, -- Position below enemy
    autoAttackLoop = nil,
    teleportConnection = nil,
}

-- Settings
local Settings = {
    attackDelay = 0.1,
    hitRange = 15,
    heightOffset = -3,
    autoAbility = false,
    selectedSkills = {"FlurryOfBlows", "BloodyCut", "Invisibility"},
}

-- Utility Functions
local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        warn("Safe call failed: " .. tostring(result))
    end
    return success, result
end

local function getEvents()
    local events = ReplicatedStorage:FindFirstChild("Events")
    if not events then
        warn("Events not found in ReplicatedStorage")
        return nil
    end
    return events
end

-- Core Functionality
local function getClosestMob()
    local closestMob = nil
    local closestDistance = math.huge
    
    for _, mob in ipairs(workspace:GetChildren()) do
        if mob:IsA("Model") and 
           mob ~= character and 
           mob:FindFirstChild("HumanoidRootPart") and 
           mob:FindFirstChild("Humanoid") and 
           mob.Humanoid.Health > 0 then
            
            local distance = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestMob = mob
            end
        end
    end
    
    return closestMob, closestDistance
end

local function equipWeapon()
    if AutoFarmCore.weaponEquipped then return end
    
    safeCall(function()
        local events = getEvents()
        if events then
            local weaponEvent = events:FindFirstChild("WeaponsEvent")
            if weaponEvent then
                weaponEvent:FireServer("Equip/UnEquip")
                AutoFarmCore.weaponEquipped = true
            end
        end
    end)
end

local function teleportToMob(mob)
    if not mob or not mob:FindFirstChild("HumanoidRootPart") or not humanoidRootPart then
        return false
    end
    
    safeCall(function()
        local mobPosition = mob.HumanoidRootPart.Position
        local targetPosition = mobPosition + Vector3.new(0, Settings.heightOffset, 0)
        
        humanoidRootPart.Anchored = true
        humanoidRootPart.CFrame = CFrame.new(targetPosition, mobPosition)
    end)
    
    return true
end

local function attackEnemy()
    local mob, distance = getClosestMob()
    if not mob or distance > Settings.hitRange then
        return false
    end
    
    equipWeapon()
    
    safeCall(function()
        local events = getEvents()
        if events then
            local combatEvent = events:FindFirstChild("Combat")
            if combatEvent then
                combatEvent:FireServer("Attack")
            end
        end
    end)
    
    return true
end

local function useSkill(skillName)
    local mob = getClosestMob()
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then return end
    
    local targetPosition = mob.HumanoidRootPart.Position
    
    safeCall(function()
        local events = getEvents()
        if events then
            local skillEvent = events:FindFirstChild("Skill")
            if skillEvent then
                skillEvent:FireServer(
                    {["Skill"] = skillName, ["Function"] = "Activate"},
                    targetPosition,
                    true
                )
            end
        end
    end)
end

-- Auto Farm System
local function startAutoFarm()
    if AutoFarmCore.enabled then return end
    
    AutoFarmCore.enabled = true
    equipWeapon()
    
    -- Main teleport and attack loop
    AutoFarmCore.teleportConnection = RunService.Heartbeat:Connect(function()
        if not AutoFarmCore.enabled then return end
        
        local mob = getClosestMob()
        if mob then
            teleportToMob(mob)
        end
    end)
    
    -- Attack loop
    AutoFarmCore.autoAttackLoop = task.spawn(function()
        while AutoFarmCore.enabled do
            attackEnemy()
            task.wait(Settings.attackDelay)
        end
    end)
    
    -- Ability loop (if enabled)
    if Settings.autoAbility then
        task.spawn(function()
            while AutoFarmCore.enabled and Settings.autoAbility do
                for _, skill in ipairs(Settings.selectedSkills) do
                    if not AutoFarmCore.enabled then break end
                    useSkill(skill)
                    task.wait(0.3)
                end
                task.wait(0.5)
            end
        end)
    end
end

local function stopAutoFarm()
    AutoFarmCore.enabled = false
    
    if AutoFarmCore.teleportConnection then
        AutoFarmCore.teleportConnection:Disconnect()
        AutoFarmCore.teleportConnection = nil
    end
    
    if humanoidRootPart then
        safeCall(function()
            humanoidRootPart.Anchored = false
        end)
    end
end

-- Create Wind UI Window
local Window = WindUI:CreateWindow({
    Title = "Auto Farm Pro",
    Icon = "zap",
    Author = "Farm Helper",
    Folder = "AutoFarmPro",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    ScrollBarEnabled = true,
    User = {
        Enabled = true,
        Anonymous = false,
    },
})

-- Create Sections
local MainSection = Window:Section({
    Title = "Auto Farm Controls",
    Icon = "settings",
    Opened = true,
})

local SettingsSection = Window:Section({
    Title = "Configuration",
    Icon = "sliders",
    Opened = false,
})

-- Create Tabs
local MainTab = Window:Tab({
    Title = "Main Farm",
    Icon = "zap",
})

local SettingsTab = Window:Tab({
    Title = "Settings",
    Icon = "settings",
})

local InfoTab = Window:Tab({
    Title = "Information",
    Icon = "info",
})

-- Main Tab Components
local AutoFarmToggle = MainTab:Toggle({
    Title = "Auto Farm",
    Desc = "Enable unified auto farming (TP + Attack + Weapon)",
    Icon = "play",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        if state then
            startAutoFarm()
        else
            stopAutoFarm()
        end
    end
})

local AutoAbilityToggle = MainTab:Toggle({
    Title = "Auto Abilities",
    Desc = "Automatically use selected skills",
    Icon = "sparkles",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        Settings.autoAbility = state
        if AutoFarmCore.enabled then
            stopAutoFarm()
            task.wait(0.1)
            startAutoFarm()
        end
    end
})

local SkillDropdown = MainTab:Dropdown({
    Title = "Skills to Use",
    Values = {"FlurryOfBlows", "BloodyCut", "Invisibility", "RapidStrike", "DeathBlow", "ShadowStep", "HealingAura"},
    Value = {"FlurryOfBlows", "BloodyCut", "Invisibility"},
    Multi = true,
    AllowNone = false,
    Callback = function(skills)
        Settings.selectedSkills = {}
        for skill, selected in pairs(skills) do
            if selected then
                table.insert(Settings.selectedSkills, skill)
            end
        end
    end
})

-- Quick Action Buttons
local EquipWeaponButton = MainTab:Button({
    Title = "Equip Weapon",
    Desc = "Manually equip weapon",
    Callback = function()
        AutoFarmCore.weaponEquipped = false
        equipWeapon()
    end
})

local FindMobButton = MainTab:Button({
    Title = "Find Closest Mob",
    Desc = "Locate and display nearest enemy",
    Callback = function()
        local mob, distance = getClosestMob()
        if mob then
            print("Closest mob: " .. (mob.Name or "Unknown") .. " at distance: " .. math.floor(distance))
        else
            print("No mobs found nearby")
        end
    end
})

local TeleportButton = MainTab:Button({
    Title = "Teleport to Mob",
    Desc = "Manually teleport to closest enemy",
    Callback = function()
        local mob = getClosestMob()
        if mob then
            teleportToMob(mob)
        end
    end
})

-- Settings Tab Components
local AttackDelaySlider = SettingsTab:Slider({
    Title = "Attack Delay",
    Step = 0.05,
    Value = {
        Min = 0.05,
        Max = 1.0,
        Default = 0.1,
    },
    Callback = function(value)
        Settings.attackDelay = value
    end
})

local HitRangeSlider = SettingsTab:Slider({
    Title = "Hit Range",
    Step = 1,
    Value = {
        Min = 5,
        Max = 30,
        Default = 15,
    },
    Callback = function(value)
        Settings.hitRange = value
    end
})

local HeightOffsetSlider = SettingsTab:Slider({
    Title = "Height Offset",
    Step = 0.5,
    Value = {
        Min = -10,
        Max = 5,
        Default = -3,
    },
    Callback = function(value)
        Settings.heightOffset = value
    end
})

-- Target Priority Dropdown (for future use)
local TargetPriorityDropdown = SettingsTab:Dropdown({
    Title = "Target Priority",
    Values = {"Closest Enemy", "Highest Level", "Lowest Health", "Most Valuable", "Boss Enemies"},
    Value = "Closest Enemy",
    Callback = function(priority)
        print("Target priority set to: " .. priority)
        -- Implementation for different targeting logic can be added here
    end
})

-- Info Tab Components
MainTab:Button({
    Title = "Script Information",
    Desc = "View details about Auto Farm Pro",
    Callback = function()
        Window:SelectTab(3) -- Switch to Info tab
    end
})

-- Handle Character Respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
    
    if not humanoidRootPart then
        warn("Failed to get HumanoidRootPart after respawn")
        return
    end
    
    -- Reset weapon status
    AutoFarmCore.weaponEquipped = false
    
    -- Restart auto farm if it was enabled
    if AutoFarmCore.enabled then
        task.wait(2) -- Wait for character to fully load
        stopAutoFarm()
        task.wait(0.5)
        startAutoFarm()
    end
end)

-- Cleanup on script end
game:GetService("GuiService").ErrorMessageChanged:Connect(function()
    if AutoFarmCore.enabled then
        stopAutoFarm()
    end
end)

-- Initialize
print("Auto Farm Pro loaded successfully!")
print("Features: Unified Auto Farm (TP + Attack + Weapon Equip)")
print("UI Library: Wind UI")

-- Select main tab by default
Window:SelectTab(1)
