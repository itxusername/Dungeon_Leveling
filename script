local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

-- Check if libraries loaded successfully
if not Fluent then
    warn("Fluent library failed to load. Script cannot continue.")
    return
end

-- Game services
local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")
local userInput = game:GetService("UserInputService")
local httpService = game:GetService("HttpService")

-- Variables with safety checks
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

-- Wait for HumanoidRootPart if not found
if not humanoidRootPart then
    humanoidRootPart = character:WaitForChild("HumanoidRootPart", 5)
    if not humanoidRootPart then
        warn("HumanoidRootPart not found. Make sure your character has loaded properly.")
        return
    end
end

-- Auto farm settings
local autoFarm = false
local autoAttack = false
local abilityActive = false
local weaponEquipped = false
local HIT_RANGE = 10
local orbitRadius = 10
local orbitAngle = 0
local heightOffset = 2.5
local attackDelay = 0.1
local saveFileName = "AutoFarmSettings.json"

-- Create Fluent Window with error handling
local Window
local success, err = pcall(function()
    Window = Fluent:CreateWindow({
        Title = "Auto Farm Pro " .. (Fluent.Version or "Unknown"),
        SubTitle = "Ultimate Farm Helper",
        TabWidth = 160,
        Size = UDim2.fromOffset(600, 460),
        Acrylic = true,
        Theme = "Dark",
        MinimizeKey = Enum.KeyCode.RightControl
    })
end)

if not success or not Window then
    warn("Failed to create window: " .. tostring(err))
    return
end

-- Create tabs with validation
local Tabs = {}
local success, err = pcall(function()
    Tabs = {
        Main = Window:AddTab({ Title = "Main", Icon = "sword" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
        About = Window:AddTab({ Title = "Info", Icon = "info" })
    }
end)

if not success or not Tabs.Main then
    warn("Failed to create tabs: " .. tostring(err))
    return
end

-- Initialize Options with safety check
local Options = Fluent.Options or {}

-- Core functions
local function getClosestMob()
    local closestMob = nil
    local closestDistance = math.huge
    
    for _, mob in ipairs(workspace:GetChildren()) do
        if mob:IsA("Model") and mob ~= character and mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
            local dist = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
            if dist < closestDistance then
                closestDistance = dist
                closestMob = mob
            end
        end
    end
    
    return closestMob, closestDistance
end

local function isInRange(mob, range)
    if not mob or not mob:FindFirstChild("HumanoidRootPart") or not humanoidRootPart then 
        return false 
    end
    return (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude <= range
end

local function equipWeapon()
    pcall(function()
        local events = game:GetService("ReplicatedStorage"):WaitForChild("Events", 3)
        if not events then warn("Events not found in ReplicatedStorage") return end
        
        local weaponEvent = events:WaitForChild("WeaponsEvent", 3)
        if not weaponEvent then warn("WeaponsEvent not found") return end
        
        local args = { [1] = "Equip/UnEquip" }
        weaponEvent:FireServer(unpack(args))
        weaponEquipped = true
    end)
end

local function useSkill(skillName)
    local mob = getClosestMob()
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then return end
    
    local targetPosition = mob.HumanoidRootPart.Position
    
    pcall(function()
        local events = game:GetService("ReplicatedStorage"):WaitForChild("Events", 3)
        if not events then warn("Events not found in ReplicatedStorage") return end
        
        local skillEvent = events:WaitForChild("Skill", 3)
        if not skillEvent then warn("Skill event not found") return end
        
        local args = {
            [1] = { ["Skill"] = skillName, ["Function"] = "Activate" },
            [2] = targetPosition,
            [3] = true
        }
        skillEvent:FireServer(unpack(args))
    end)
end

local function attackEnemy()
    local mob, distance = getClosestMob()
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then return end
    
    if distance > HIT_RANGE * 1.5 then return end

    local targetParts = {"HumanoidRootPart", "Torso", "UpperTorso", "Head", "LowerTorso"}
    local targetPart = nil
    
    for _, partName in ipairs(targetParts) do
        targetPart = mob:FindFirstChild(partName)
        if targetPart then break end
    end
    
    if not targetPart then return end
    
    if not weaponEquipped then
        equipWeapon()
    end
    
    pcall(function()
        local events = game:GetService("ReplicatedStorage"):WaitForChild("Events", 3)
        if not events then return end
        
        local combatEvent = events:FindFirstChild("Combat")
        if combatEvent then
            combatEvent:FireServer("Attack")
        end
    end)
end

local attackLoopRunning = false
local function startAttackLoop()
    if attackLoopRunning then return end
    attackLoopRunning = true
    
    spawn(function()
        while autoAttack or autoFarm do
            attackEnemy()
            task.wait(attackDelay)
            if not (autoAttack or autoFarm) then break end
        end
        attackLoopRunning = false
    end)
end

local orbitConnection = nil
local function startOrbiting()
    if orbitConnection then orbitConnection:Disconnect() end
    
    orbitConnection = runService.Heartbeat:Connect(function()
        local mob = getClosestMob()
        if mob and mob:FindFirstChild("HumanoidRootPart") and autoFarm and humanoidRootPart then
            if not autoAttack then
                autoAttack = true
                startAttackLoop()
            end
            
            pcall(function()
                humanoidRootPart.Anchored = false
                
                orbitAngle = orbitAngle + 2.5
                if orbitAngle >= 360 then orbitAngle = 0 end
                
                local angle = math.rad(orbitAngle)
                local x = math.cos(angle) * orbitRadius
                local z = math.sin(angle) * orbitRadius
                
                local mobPosition = mob.HumanoidRootPart.Position
                local targetPosition = mobPosition + Vector3.new(x, heightOffset, z)
                
                humanoidRootPart.CFrame = CFrame.new(targetPosition, mobPosition)
                humanoidRootPart.Anchored = true
            end)
        end
    end)
end

local function stopAutoFarm()
    autoFarm = false
    if not autoAttack then
        attackLoopRunning = false
    end
    if humanoidRootPart then
        pcall(function() humanoidRootPart.Anchored = false end)
    end
    if orbitConnection then orbitConnection:Disconnect() end
end

local abilityLoop = nil
local function toggleAbility(isEnabled)
    abilityActive = isEnabled
    if isEnabled then
        if not abilityLoop then
            abilityLoop = spawn(function()
                while abilityActive do
                    useSkill("FlurryOfBlows")
                    task.wait(0.3)
                    useSkill("BloodyCut")
                    task.wait(0.3)
                    useSkill("Invisibility")
                    task.wait(0.4)
                end
            end)
        end
    else
        abilityActive = false
        abilityLoop = nil
    end
end

local function saveSettings()
    local settings = {
        autoFarm = autoFarm,
        autoAttack = autoAttack,
        abilityActive = abilityActive,
        orbitRadius = orbitRadius,
        heightOffset = heightOffset,
        attackDelay = attackDelay,
        HIT_RANGE = HIT_RANGE
    }
    
    pcall(function()
        writefile(saveFileName, httpService:JSONEncode(settings))
    end)
end

local function loadSettings()
    local success, settings = pcall(function()
        if isfile and isfile(saveFileName) then
            return httpService:JSONDecode(readfile(saveFileName))
        end
        return nil
    end)
    
    if success and settings then
        autoFarm = settings.autoFarm or false
        autoAttack = settings.autoAttack or false
        abilityActive = settings.abilityActive or false
        orbitRadius = settings.orbitRadius or 10
        heightOffset = settings.heightOffset or 2.5
        attackDelay = settings.attackDelay or 0.1
        HIT_RANGE = settings.HIT_RANGE or 10
        return true
    end
    return false
end

pcall(loadSettings)

-- UI Components
pcall(function()
    Tabs.Main:AddParagraph({
        Title = "Welcome to Auto Farm Pro",
        Content = "The ultimate farming solution. Toggle features below to begin."
    })

    local AutoFarmToggle = Tabs.Main:AddToggle("AutoFarm", {
        Title = "Auto Farm",
        Description = "Automatically orbit and attack nearby enemies",
        Default = autoFarm
    })

    if AutoFarmToggle then
        AutoFarmToggle:OnChanged(function(Value)
            autoFarm = Value
            if Value then
                if not weaponEquipped then equipWeapon() end
                startOrbiting()
                if Options.AutoAttack and Options.AutoAttack.SetValue then
                    Options.AutoAttack:SetValue(true)
                end
            else
                stopAutoFarm()
            end
            saveSettings()
        end)
    end

    local AutoAttackToggle = Tabs.Main:AddToggle("AutoAttack", {
        Title = "Auto Attack",
        Description = "Automatically attack without orbiting",
        Default = autoAttack
    })

    if AutoAttackToggle then
        AutoAttackToggle:OnChanged(function(Value)
            autoAttack = Value
            if Value then
                if not weaponEquipped then equipWeapon() end
                startAttackLoop()
            end
            saveSettings()
        end)
    end

    local AbilityToggle = Tabs.Main:AddToggle("AutoAbility", {
        Title = "Auto Ability",
        Description = "Automatically use abilities",
        Default = abilityActive
    })

    if AbilityToggle then
        AbilityToggle:OnChanged(function(Value)
            toggleAbility(Value)
            saveSettings()
        end)
    end

    Tabs.Main:AddButton({
        Title = "Equip Weapon",
        Callback = function()
            equipWeapon()
            if Fluent.Notify then
                Fluent:Notify({ Title = "Weapon", Content = "Weapon equipped successfully", Duration = 3 })
            end
        end
    })

    Tabs.Main:AddButton({
        Title = "Find Closest Mob",
        Callback = function()
            local mob, distance = getClosestMob()
            if Fluent.Notify then
                if mob then
                    Fluent:Notify({ Title = "Found Mob", Content = "Closest mob: " .. (mob.Name or "Unknown") .. " (Distance: " .. math.floor(distance) .. ")", Duration = 3 })
                else
                    Fluent:Notify({ Title = "No Mobs Found", Content = "Could not find any mobs nearby", Duration = 3 })
                end
            end
        end
    })
end)

-- Settings Tab
pcall(function()
    Tabs.Settings:AddSlider("OrbitRadius", {
        Title = "Orbit Radius",
        Description = "Distance to orbit around mobs",
        Default = orbitRadius,
        Min = 5,
        Max = 20,
        Rounding = 1,
        Callback = function(Value)
            orbitRadius = Value
            saveSettings()
        end
    })

    Tabs.Settings:AddSlider("HeightOffset", {
        Title = "Height Offset",
        Description = "Height above mob",
        Default = heightOffset,
        Min = 0,
        Max = 10,
        Rounding = 0.5,
        Callback = function(Value)
            heightOffset = Value
            saveSettings()
        end
    })

    Tabs.Settings:AddSlider("AttackDelay", {
        Title = "Attack Delay",
        Description = "Delay between attacks",
        Default = attackDelay,
        Min = 0.05,
        Max = 1,
        Rounding = 0.05,
        Callback = function(Value)
            attackDelay = Value
            saveSettings()
        end
    })

    Tabs.Settings:AddSlider("HitRange", {
        Title = "Hit Range",
        Description = "Maximum attack range",
        Default = HIT_RANGE,
        Min = 5,
        Max = 20,
        Rounding = 1,
        Callback = function(Value)
            HIT_RANGE = Value
            saveSettings()
        end
    })

    Tabs.Settings:AddButton({
        Title = "Save Settings",
        Callback = function()
            saveSettings()
            if Fluent.Notify then
                Fluent:Notify({ Title = "Settings Saved", Content = "Your settings have been saved successfully", Duration = 3 })
            end
        end
    })

    Tabs.Settings:AddButton({
        Title = "Load Settings",
        Callback = function()
            if loadSettings() then
                pcall(function()
                    if Options.AutoFarm and Options.AutoFarm.SetValue then Options.AutoFarm:SetValue(autoFarm) end
                    if Options.AutoAttack and Options.AutoAttack.SetValue then Options.AutoAttack:SetValue(autoAttack) end
                    if Options.AutoAbility and Options.AutoAbility.SetValue then Options.AutoAbility:SetValue(abilityActive) end
                    if Options.OrbitRadius and Options.OrbitRadius.SetValue then Options.OrbitRadius:SetValue(orbitRadius) end
                    if Options.HeightOffset and Options.HeightOffset.SetValue then Options.HeightOffset:SetValue(heightOffset) end
                    if Options.AttackDelay and Options.AttackDelay.SetValue then Options.AttackDelay:SetValue(attackDelay) end
                    if Options.HitRange and Options.HitRange.SetValue then Options.HitRange:SetValue(HIT_RANGE) end
                end)
                if Fluent.Notify then
                    Fluent:Notify({ Title = "Settings Loaded", Content = "Your settings have been loaded successfully", Duration = 3 })
                end
            else
                if Fluent.Notify then
                    Fluent:Notify({ Title = "Load Failed", Content = "No saved settings found or error loading", Duration = 3 })
                end
            end
        end
    })
end)

-- About Tab
pcall(function()
    Tabs.About:AddParagraph({
        Title = "Auto Farm Pro",
        Content = "Version 2.0\nA professional auto farming solution.\n\nFeatures include automatic orbiting, attacking, ability usage, and customizable settings."
    })

    Tabs.About:AddParagraph({
        Title = "How to Use",
        Content = "1. Enable Auto Farm to automatically orbit and attack nearby mobs\n2. Use Settings to customize orbit distance, height, and attack delay\n3. Toggle Auto Ability to use skills automatically"
    })
end)

-- Integrate SaveManager and InterfaceManager
pcall(function()
    if SaveManager and SaveManager.SetLibrary then SaveManager:SetLibrary(Fluent) end
    if InterfaceManager and InterfaceManager.SetLibrary then InterfaceManager:SetLibrary(Fluent) end

    if SaveManager and SaveManager.IgnoreThemeSettings then SaveManager:IgnoreThemeSettings() end
    if SaveManager and SaveManager.SetIgnoreIndexes then SaveManager:SetIgnoreIndexes({"AutoFarm", "AutoAttack", "AutoAbility"}) end

    if InterfaceManager and InterfaceManager.SetFolder then InterfaceManager:SetFolder("AutoFarmPro") end
    if SaveManager and SaveManager.SetFolder then SaveManager:SetFolder("AutoFarmPro/ConfigUI") end

    if InterfaceManager and InterfaceManager.BuildInterfaceSection then InterfaceManager:BuildInterfaceSection(Tabs.Settings) end
    if SaveManager and SaveManager.BuildConfigSection then SaveManager:BuildConfigSection(Tabs.Settings) end

    Window:SelectTab(1)

    if SaveManager and SaveManager.LoadAutoloadConfig then SaveManager:LoadAutoloadConfig() end
end)

if Fluent.Notify then
    Fluent:Notify({
        Title = "Auto Farm Pro",
        Content = "Script loaded successfully!",
        Duration = 5
    })
end

-- Handle character respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    pcall(function()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart", 5)
        if not humanoidRootPart then
            warn("HumanoidRootPart not found after respawn")
            return
        end
        
        if autoFarm then
            weaponEquipped = false
            task.wait(1)
            equipWeapon()
            startOrbiting()
        elseif autoAttack then
            weaponEquipped = false
            task.wait(1)
            equipWeapon()
            startAttackLoop()
        end
        
        if abilityActive then
            toggleAbility(true)
        end
    end)
end)

-- Apply settings immediately if enabled
pcall(function()
    if autoFarm then
        equipWeapon()
        startOrbiting()
    elseif autoAttack then
        equipWeapon()
        startAttackLoop()
    end

    if abilityActive then
        toggleAbility(true)
    end
end)
