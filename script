local MacLib = loadstring(game:HttpGet("https://github.com/biggaboy212/Maclib/releases/latest/download/maclib.txt"))()

-- Game services
local player = game.Players.LocalPlayer
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")
local userInput = game:GetService("UserInputService")
local httpService = game:GetService("HttpService")

-- Variables with safety checks
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

-- Wait for HumanoidRootPart if not found
if not humanoidRootPart then
    humanoidRootPart = character:WaitForChild("HumanoidRootPart", 5)
    if not humanoidRootPart then
        warn("HumanoidRootPart not found. Make sure your character has loaded properly.")
        return
    end
end

-- Auto farm settings
local autoFarm = false
local autoAttack = false
local abilityActive = false
local weaponEquipped = false
local HIT_RANGE = 10
local orbitRadius = 10
local orbitAngle = 0
local heightOffset = 2.5
local attackDelay = 0.1

-- Create MacLib Window with error handling
local Window
local success, err = pcall(function()
    Window = MacLib:Window({
        Title = "Auto Farm Pro",
        Subtitle = "Ultimate Farm Helper",
        Size = UDim2.fromOffset(500, 300),
        DragStyle = 1,
        DisabledWindowControls = {},
        ShowUserInfo = true,
        Keybind = Enum.KeyCode.RightControl,
        AcrylicBlur = true,
    })
end)

if not success or not Window then
    warn("Failed to create window: " .. tostring(err))
    return
end

-- SaveManager Implementation
local SaveManager = {}
local configFolder = "AutoFarmPro"

function SaveManager:SetFolder(Folder)
    configFolder = Folder
    return self
end

function SaveManager:SaveConfig(Path)
    local data = {}
    
    -- Loop through all elements with flags and save their values
    for flag, element in pairs(Window.Elements) do
        if element and element.Flag and not element.IgnoreConfig then
            local value = element:GetValue()
            data[flag] = value
        end
    end
    
    -- Create path if it doesn't contain .json
    local fullPath = Path
    if not string.find(Path, ".json") then
        fullPath = Path .. ".json"
    end
    
    -- Make sure the path has a valid name
    if #fullPath <= 5 then
        Window:Notify({
            Title = "Invalid Path",
            Description = "Please provide a valid config name",
            Lifetime = 3
        })
        return
    end
    
    -- Save the config
    pcall(function()
        writefile(configFolder .. "/" .. fullPath, httpService:JSONEncode(data))
    end)
    
    Window:Notify({
        Title = "Config Saved",
        Description = "Saved config to " .. fullPath,
        Lifetime = 3
    })
    
    return self
end

function SaveManager:LoadConfig(Path)
    -- Create path if it doesn't contain .json
    local fullPath = Path
    if not string.find(Path, ".json") then
        fullPath = Path .. ".json"
    end
    
    -- Check if file exists
    if not pcall(function() return readfile(configFolder .. "/" .. fullPath) end) then
        Window:Notify({
            Title = "Config Not Found",
            Description = "Config " .. fullPath .. " does not exist",
            Lifetime = 3
        })
        return
    end
    
    -- Load the config data
    local data = httpService:JSONDecode(readfile(configFolder .. "/" .. fullPath))
    
    -- Apply the data to elements
    for flag, value in pairs(data) do
        local element = Window.Elements[flag]
        if element and element.SetValue then
            element:SetValue(value)
        end
    end
    
    Window:Notify({
        Title = "Config Loaded",
        Description = "Loaded config from " .. fullPath,
        Lifetime = 3
    })
    
    return self
end

function SaveManager:RefreshConfigList()
    local list = {}
    
    -- Make sure folder exists
    pcall(function()
        if not isfolder(configFolder) then
            makefolder(configFolder)
        end
    end)
    
    -- Get all files in the folder
    local success, files = pcall(function()
        return listfiles(configFolder)
    end)
    
    if success and files then
        for _, file in ipairs(files) do
            local filename = file:match("([^/\\]+)$") -- Extract filename from path
            if filename:match("%.json$") then -- Only include .json files
                table.insert(list, filename)
            end
        end
    end
    
    return list
end

function SaveManager:LoadAutoLoadConfig()
    -- Check if auto load config exists
    local success, autoLoadConfig = pcall(function()
        if isfile(configFolder .. "/autoload.txt") then
            return readfile(configFolder .. "/autoload.txt")
        end
        return nil
    end)
    
    if success and autoLoadConfig then
        self:LoadConfig(autoLoadConfig)
    end
    
    return self
end

-- Ensuring the config folder exists
pcall(function()
    if not isfolder(configFolder) then
        makefolder(configFolder)
    end
end)

-- Global Settings
local globalSettings = {
    UIBlurToggle = Window:GlobalSetting({
        Name = "UI Blur",
        Default = Window:GetAcrylicBlurState(),
        Callback = function(bool)
            Window:SetAcrylicBlurState(bool)
            Window:Notify({
                Title = Window.Settings.Title,
                Description = (bool and "Enabled" or "Disabled") .. " UI Blur",
                Lifetime = 5
            })
        end,
    }),
    NotificationToggler = Window:GlobalSetting({
        Name = "Notifications",
        Default = Window:GetNotificationsState(),
        Callback = function(bool)
            Window:SetNotificationsState(bool)
            Window:Notify({
                Title = Window.Settings.Title,
                Description = (bool and "Enabled" or "Disabled") .. " Notifications",
                Lifetime = 5
            })
        end,
    }),
    ShowUserInfo = Window:GlobalSetting({
        Name = "Show User Info",
        Default = Window:GetUserInfoState(),
        Callback = function(bool)
            Window:SetUserInfoState(bool)
            Window:Notify({
                Title = Window.Settings.Title,
                Description = (bool and "Showing" or "Redacted") .. " User Info",
                Lifetime = 5
            })
        end,
    })
}

-- Create tabs
local tabGroups = {
    TabGroup1 = Window:TabGroup()
}

local tabs = {
    Main = tabGroups.TabGroup1:Tab({ Name = "Main", Image = "rbxassetid://18821914323" }),
    Settings = tabGroups.TabGroup1:Tab({ Name = "Settings", Image = "rbxassetid://10734950309" }),
    Info = tabGroups.TabGroup1:Tab({ Name = "Info", Image = "rbxassetid://10734948147" }),
    Config = tabGroups.TabGroup1:Tab({ Name = "Config", Image = "rbxassetid://10734691225" }) -- New Config tab
}

-- Create sections
local sections = {
    MainSection = tabs.Main:Section({ Side = "Left" }),
    SettingsSection = tabs.Settings:Section({ Side = "Left" }),
    InfoSection = tabs.Info:Section({ Side = "Left" }),
    ConfigSection = tabs.Config:Section({ Side = "Left" }) -- New Config section
}

-- Core functions
local function getClosestMob()
    local closestMob = nil
    local closestDistance = math.huge
    
    for _, mob in ipairs(workspace:GetChildren()) do
        if mob:IsA("Model") and mob ~= character and mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
            local dist = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
            if dist < closestDistance then
                closestDistance = dist
                closestMob = mob
            end
        end
    end
    
    return closestMob, closestDistance
end

local function isInRange(mob, range)
    if not mob or not mob:FindFirstChild("HumanoidRootPart") or not humanoidRootPart then 
        return false 
    end
    return (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude <= range
end

local function equipWeapon()
    pcall(function()
        local events = game:GetService("ReplicatedStorage"):WaitForChild("Events", 3)
        if not events then warn("Events not found in ReplicatedStorage") return end
        
        local weaponEvent = events:WaitForChild("WeaponsEvent", 3)
        if not weaponEvent then warn("WeaponsEvent not found") return end
        
        local args = { [1] = "Equip/UnEquip" }
        weaponEvent:FireServer(unpack(args))
        weaponEquipped = true
    end)
end

local function useSkill(skillName)
    local mob = getClosestMob()
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then return end
    
    local targetPosition = mob.HumanoidRootPart.Position
    
    pcall(function()
        local events = game:GetService("ReplicatedStorage"):WaitForChild("Events", 3)
        if not events then warn("Events not found in ReplicatedStorage") return end
        
        local skillEvent = events:WaitForChild("Skill", 3)
        if not skillEvent then warn("Skill event not found") return end
        
        local args = {
            [1] = { ["Skill"] = skillName, ["Function"] = "Activate" },
            [2] = targetPosition,
            [3] = true
        }
        skillEvent:FireServer(unpack(args))
    end)
end

local function attackEnemy()
    local mob, distance = getClosestMob()
    if not mob or not mob:FindFirstChild("HumanoidRootPart") then return end
    
    if distance > HIT_RANGE * 1.5 then return end

    local targetParts = {"HumanoidRootPart", "Torso", "UpperTorso", "Head", "LowerTorso"}
    local targetPart = nil
    
    for _, partName in ipairs(targetParts) do
        targetPart = mob:FindFirstChild(partName)
        if targetPart then break end
    end
    
    if not targetPart then return end
    
    if not weaponEquipped then
        equipWeapon()
    end
    
    pcall(function()
        local events = game:GetService("ReplicatedStorage"):WaitForChild("Events", 3)
        if not events then return end
        
        local combatEvent = events:FindFirstChild("Combat")
        if combatEvent then
            combatEvent:FireServer("Attack")
        end
    end)
end

local attackLoopRunning = false
local function startAttackLoop()
    if attackLoopRunning then return end
    attackLoopRunning = true
    
    spawn(function()
        while autoAttack or autoFarm do
            attackEnemy()
            task.wait(attackDelay)
            if not (autoAttack or autoFarm) then break end
        end
        attackLoopRunning = false
    end)
end

local orbitConnection = nil
local function startOrbiting()
    if orbitConnection then orbitConnection:Disconnect() end
    
    orbitConnection = runService.Heartbeat:Connect(function()
        local mob = getClosestMob()
        if mob and mob:FindFirstChild("HumanoidRootPart") and autoFarm and humanoidRootPart then
            if not autoAttack then
                autoAttack = true
                startAttackLoop()
            end
            
            pcall(function()
                humanoidRootPart.Anchored = false
                
                orbitAngle = orbitAngle + 2.5
                if orbitAngle >= 360 then orbitAngle = 0 end
                
                local angle = math.rad(orbitAngle)
                local x = math.cos(angle) * orbitRadius
                local z = math.sin(angle) * orbitRadius
                
                local mobPosition = mob.HumanoidRootPart.Position
                local targetPosition = mobPosition + Vector3.new(x, heightOffset, z)
                
                humanoidRootPart.CFrame = CFrame.new(targetPosition, mobPosition)
                humanoidRootPart.Anchored = true
            end)
        end
    end)
end

local function stopAutoFarm()
    autoFarm = false
    if not autoAttack then
        attackLoopRunning = false
    end
    if humanoidRootPart then
        pcall(function() humanoidRootPart.Anchored = false end)
    end
    if orbitConnection then orbitConnection:Disconnect() end
end

local abilityLoop = nil
local function toggleAbility(isEnabled)
    abilityActive = isEnabled
    if isEnabled then
        if not abilityLoop then
            abilityLoop = spawn(function()
                while abilityActive do
                    useSkill("FlurryOfBlows")
                    task.wait(0.3)
                    useSkill("BloodyCut")
                    task.wait(0.3)
                    useSkill("Invisibility")
                    task.wait(0.4)
                end
            end)
        end
    else
        abilityActive = false
        abilityLoop = nil
    end
end

-- Main Tab UI Components
pcall(function()
    sections.MainSection:Header({
        Text = "Welcome to Auto Farm Pro"
    })
    
    sections.MainSection:Paragraph({
        Header = "Farm Helper",
        Body = "The ultimate farming solution. Toggle features below to begin."
    })

    sections.MainSection:Toggle({
        Name = "Auto Farm",
        Default = autoFarm,
        Callback = function(Value)
            autoFarm = Value
            if Value then
                if not weaponEquipped then equipWeapon() end
                startOrbiting()
            else
                stopAutoFarm()
            end
        end,
    }, "AutoFarm")

    sections.MainSection:Toggle({
        Name = "Auto Attack",
        Default = autoAttack,
        Callback = function(Value)
            autoAttack = Value
            if Value then
                if not weaponEquipped then equipWeapon() end
                startAttackLoop()
            end
        end,
    }, "AutoAttack")

    sections.MainSection:Toggle({
        Name = "Auto Ability",
        Default = abilityActive,
        Callback = function(Value)
            toggleAbility(Value)
        end,
    }, "AutoAbility")

    sections.MainSection:Divider()
    
    sections.MainSection:Header({
        Text = "Quick Actions"
    })

    sections.MainSection:Button({
        Name = "Equip Weapon",
        Callback = function()
            equipWeapon()
            Window:Notify({
                Title = "Weapon",
                Description = "Weapon equipped successfully",
                Lifetime = 3
            })
        end,
    })

    sections.MainSection:Button({
        Name = "Find Closest Mob",
        Callback = function()
            local mob, distance = getClosestMob()
            if mob then
                Window:Notify({
                    Title = "Found Mob",
                    Description = "Closest mob: " .. (mob.Name or "Unknown") .. " (Distance: " .. math.floor(distance) .. ")",
                    Lifetime = 3
                })
            else
                Window:Notify({
                    Title = "No Mobs Found",
                    Description = "Could not find any mobs nearby",
                    Lifetime = 3
                })
            end
        end,
    })
    
    -- Adding some example elements from MacLib
    sections.MainSection:Divider()
    
    sections.MainSection:Header({
        Text = "Extra Features"
    })
    
    -- Example keybind
    sections.MainSection:Keybind({
        Name = "Quick Toggle Farm",
        Blacklist = false,
        Callback = function(binded)
            autoFarm = not autoFarm
            if autoFarm then
                if not weaponEquipped then equipWeapon() end
                startOrbiting()
            else
                stopAutoFarm()
            end
            Window:Notify({
                Title = "Auto Farm Pro",
                Description = (autoFarm and "Enabled" or "Disabled") .. " farming with hotkey",
                Lifetime = 3
            })
        end,
        onBinded = function(bind)
            Window:Notify({
                Title = "Auto Farm Pro",
                Description = "Successfully bound farm toggle to " .. tostring(bind.Name),
                Lifetime = 3
            })
        end,
    }, "FarmKeybind")
    
    -- Example colorpicker
    sections.MainSection:Colorpicker({
        Name = "Highlight Color",
        Default = Color3.fromRGB(0, 255, 255),
        Callback = function(color)
            -- In a real implementation, this could highlight targets
            Window:Notify({
                Title = "Auto Farm Pro", 
                Description = "Changed highlight color",
                Lifetime = 2
            })
        end,
    }, "HighlightColor")
    
    -- Example dropdown
    local targetOptions = {
        "Closest Enemy",
        "Highest Level",
        "Lowest Health",
        "Most Valuable",
        "Boss Enemies"
    }
    
    sections.MainSection:Dropdown({
        Name = "Target Priority",
        Multi = false,
        Required = true,
        Options = targetOptions,
        Default = 1,
        Callback = function(Value)
            Window:Notify({
                Title = "Target Priority",
                Description = "Set priority to: " .. Value,
                Lifetime = 3
            })
        end,
    }, "TargetDropdown")
    
    -- Multi-selection example
    local skillOptions = {
        "FlurryOfBlows",
        "BloodyCut",
        "Invisibility",
        "RapidStrike",
        "DeathBlow",
        "ShadowStep",
        "HealingAura"
    }
    
    sections.MainSection:Dropdown({
        Name = "Auto-Use Skills",
        Search = true,
        Multi = true,
        Required = false,
        Options = skillOptions,
        Default = {"FlurryOfBlows", "BloodyCut", "Invisibility"},
        Callback = function(Value)
            local selectedSkills = {}
            for Skill, State in next, Value do
                table.insert(selectedSkills, Skill)
            end
            Window:Notify({
                Title = "Skills Updated",
                Description = "Selected skills: " .. table.concat(selectedSkills, ", "),
                Lifetime = 3
            })
        end,
    }, "SkillsDropdown")
end)

-- Settings Tab
pcall(function()
    sections.SettingsSection:Header({
        Text = "Auto Farm Settings"
    })

    sections.SettingsSection:Slider({
        Name = "Orbit Radius",
        Default = orbitRadius,
        Minimum = 5,
        Maximum = 20,
        DisplayMethod = "Value",
        Precision = 1,
        Callback = function(Value)
            orbitRadius = Value
        end
    }, "OrbitRadius")

    sections.SettingsSection:Slider({
        Name = "Height Offset",
        Default = heightOffset,
        Minimum = 0,
        Maximum = 10,
        DisplayMethod = "Value",
        Precision = 0.5,
        Callback = function(Value)
            heightOffset = Value
        end
    }, "HeightOffset")

    sections.SettingsSection:Slider({
        Name = "Attack Delay",
        Default = attackDelay,
        Minimum = 0.05,
        Maximum = 1,
        DisplayMethod = "Value",
        Precision = 0.05,
        Callback = function(Value)
            attackDelay = Value
        end
    }, "AttackDelay")

    sections.SettingsSection:Slider({
        Name = "Hit Range",
        Default = HIT_RANGE,
        Minimum = 5,
        Maximum = 20,
        DisplayMethod = "Value",
        Precision = 1,
        Callback = function(Value)
            HIT_RANGE = Value
        end
    }, "HitRange")
    
    sections.SettingsSection:Divider()
    
    sections.SettingsSection:Header({
        Text = "Advanced Settings"
    })
    
    -- Example input
    sections.SettingsSection:Input({
        Name = "Custom Enemy Filter",
        Placeholder = "Enter enemy names...",
        AcceptedCharacters = "All",
        Callback = function(input)
            Window:Notify({
                Title = "Enemy Filter",
                Description = "Custom filter applied: " .. input
            })
        end,
        onChanged = function(input)
            print("Filter being typed: " .. input)
        end,
    }, "EnemyFilter")
    
    -- Example alpha colorpicker
    local alphaColorPicker = sections.SettingsSection:Colorpicker({
        Name = "Orbit Visualization",
        Default = Color3.fromRGB(255,0,0),
        Alpha = 0.5,
        Callback = function(color, alpha)
            Window:Notify({
                Title = "Visualization",
                Description = "Updated orbit visualization settings"
            })
        end,
    }, "OrbitVisualization")
    
    -- Example rainbow toggle
    local rainbowActive = false
    local rainbowConnection
    local hue = 0
    
    sections.SettingsSection:Toggle({
        Name = "Rainbow Effect",
        Default = false,
        Callback = function(value)
            rainbowActive = value
    
            if rainbowActive then
                rainbowConnection = game:GetService("RunService").RenderStepped:Connect(function(deltaTime)
                    hue = (hue + deltaTime * 0.1) % 1
                    alphaColorPicker:SetColor(Color3.fromHSV(hue, 1, 1))
                end)
            elseif rainbowConnection then
                rainbowConnection:Disconnect()
                rainbowConnection = nil
            end
            
            Window:Notify({
                Title = "Visual Effects",
                Description = (value and "Enabled" or "Disabled") .. " rainbow effect",
                Lifetime = 3
            })
        end,
    }, "RainbowToggle")
end)

-- Info Tab
pcall(function()
    sections.InfoSection:Header({
        Text = "Auto Farm Pro"
    })

    sections.InfoSection:Paragraph({
        Header = "Version",
        Body = "Version 2.0\nA professional auto farming solution."
    })
    
    sections.InfoSection:Paragraph({
        Header = "Features",
        Body = "• Automatic orbiting around enemies\n• Smart attacking with customizable delay\n• Auto ability usage\n• Customizable settings\n• Target prioritization\n• Visual effects and highlighting\n• Config saving and loading system"
    })

    sections.InfoSection:Paragraph({
        Header = "How to Use",
        Body = "1. Enable Auto Farm to automatically orbit and attack nearby mobs\n2. Use Settings to customize orbit distance, height, and attack delay\n3. Toggle Auto Ability to use skills automatically\n4. Set up hotkeys for quick access to common functions\n5. Save your settings in the Config tab"
    })
    
    sections.InfoSection:Label({
        Text = "Converted from Fluent UI to MacLib UI"
    })
    
    sections.InfoSection:SubLabel({
        Text = "For any issues or suggestions, please contact the developer"
    })
end)

-- Config Tab
pcall(function()
    sections.ConfigSection:Header({
        Text = "Configuration Management"
    })
    
    sections.ConfigSection:Paragraph({
        Header = "Save & Load Settings",
        Body = "Create and manage your farm configurations"
    })
    
    -- Save config section
    local configNameInput
    
    configNameInput = sections.ConfigSection:Input({
        Name = "Config Name",
        Placeholder = "Enter config name...",
        AcceptedCharacters = "All",
        Callback = function(input)
            -- Callback is triggered when the user submits the input
        end,
    }, "ConfigName")
    
    sections.ConfigSection:Button({
        Name = "Save Config",
        Callback = function()
            local configName = configNameInput:GetValue()
            if configName and configName:gsub("%s", "") ~= "" then
                SaveManager:SaveConfig(configName)
            else
                Window:Notify({
                    Title = "Error",
                    Description = "Please enter a config name",
                    Lifetime = 3
                })
            end
        end,
    })
    
    sections.ConfigSection:Divider()
    
    -- Load config section
    local configs = SaveManager:RefreshConfigList()
    local configDropdown
    
    configDropdown = sections.ConfigSection:Dropdown({
        Name = "Select Config",
        Multi = false,
        Required = true,
        Options = configs,
        Default = configs[1] or "",
        Callback = function(Value)
            -- Callback when user selects a config
        end,
    }, "ConfigDropdown")
    
    sections.ConfigSection:Button({
        Name = "Load Selected Config",
        Callback = function()
            local selected = configDropdown:GetValue()
            if selected and selected ~= "" then
                SaveManager:LoadConfig(selected)
            else
                Window:Notify({
                    Title = "Error",
                    Description = "Please select a config to load",
                    Lifetime = 3
                })
            end
        end,
    })
    
    sections.ConfigSection:Button({
        Name = "Refresh Config List",
        Callback = function()
            local newConfigs = SaveManager:RefreshConfigList()
            configDropdown:UpdateOptions(newConfigs)
            Window:Notify({
                Title = "Config List",
                Description = "Refreshed config list, found " .. #newConfigs .. " configs",
                Lifetime = 3
            })
        end,
    })
    
    sections.ConfigSection:Divider()
    
    -- Auto load section
    sections.ConfigSection:Button({
        Name = "Set As Auto Load",
        Callback = function()
            local selected = configDropdown:GetValue()
            if selected and selected ~= "" then
                -- Save this config as the auto load config
                pcall(function()
                    writefile(configFolder .. "/autoload.txt", selected)
                end)
                
                Window:Notify({
                    Title = "Auto Load",
                    Description = "Set " .. selected .. " as auto load config",
                    Lifetime = 3
                })
            else
                Window:Notify({
                    Title = "Error",
                    Description = "Please select a config first",
                    Lifetime = 3
                })
            end
        end,
    })
    
    sections.ConfigSection:Button({
        Name = "Clear Auto Load",
        Callback = function()
            pcall(function()
                if isfile(configFolder .. "/autoload.txt") then
                    delfile(configFolder .. "/autoload.txt")
                    
                    Window:Notify({
                        Title = "Auto Load",
                        Description = "Cleared auto load config",
                        Lifetime = 3
                    })
                else
                    Window:Notify({
                        Title = "Auto Load",
                        Description = "No auto load config set",
                        Lifetime = 3
                    })
                end
            end)
        end,
    })
    
    sections.ConfigSection:Divider()
    
    -- Delete config section
    sections.ConfigSection:Button({
        Name = "Delete Selected Config",
        Callback = function()
            local selected = configDropdown:GetValue()
            if selected and selected ~= "" then
                local confirmDelete = true -- Add confirmation dialog if possible
                
                if confirmDelete then
                    pcall(function()
                        delfile(configFolder .. "/" .. selected)
                        
                        -- Refresh the dropdown
                        local newConfigs = SaveManager:RefreshConfigList()
                        configDropdown:UpdateOptions(newConfigs)
                        
                        Window:Notify({
                            Title = "Config Deleted",
                            Description = "Deleted config: " .. selected,
                            Lifetime = 3
                        })
                    end)
                end
            else
                Window:Notify({
                    Title = "Error",
                    Description = "Please select a config to delete",
                    Lifetime = 3
                })
            end
        end,
    })
    
    -- Setup config folder input
    sections.ConfigSection:Divider()
    
    sections.ConfigSection:Header({
        Text = "Advanced Configuration"
    })
    
    local folderInput
    
    folderInput = sections.ConfigSection:Input({
        Name = "Config Folder",
        Placeholder = configFolder,
        AcceptedCharacters = "All",
        Callback = function(input)
            if input and input:gsub("%s", "") ~= "" then
                SaveManager:SetFolder(input)
                
                -- Create folder if it doesn't exist
                pcall(function()
                    if not isfolder(input) then
                        makefolder(input)
                    end
                end)
                
                Window:Notify({
                    Title = "Config Folder",
                    Description = "Set folder to: " .. input,
                    Lifetime = 3
                })
                
                -- Refresh the configs list
                local newConfigs = SaveManager:RefreshConfigList()
                configDropdown:UpdateOptions(newConfigs)
            end
        end,
    }, "ConfigFolder")
    
    -- Initialize with current folder
    folderInput:SetValue(configFolder)
end)

Window.onUnloaded(function()
    if orbitConnection then orbitConnection:Disconnect() end
    if humanoidRootPart then
        pcall(function() humanoidRootPart.Anchored = false end)
    end
    print("Auto Farm Pro unloaded!")
end)

tabs.Main:Select()

-- Load auto load config if it exists
SaveManager:LoadAutoLoadConfig()

-- Apply settings immediately if enabled
pcall(function()
    if autoFarm then
        equipWeapon()
        startOrbiting()
    elseif autoAttack then
        equipWeapon()
        startAttackLoop()
    end

    if abilityActive then
        toggleAbility(true)
    end
end)

-- Handle character respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    pcall(function()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart", 5)
        if not humanoidRootPart then
            warn("HumanoidRootPart not found after respawn")
            return
        end
        
        if autoFarm then
            weaponEquipped = false
            task.wait(1)
            equipWeapon()
            startOrbiting()
        elseif autoAttack then
            weaponEquipped = false
            task.wait(1)
            equipWeapon()
            startAttackLoop()
        end
    end)
end)
