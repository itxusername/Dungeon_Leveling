local MacLib = loadstring(game:HttpGet("https://github.com/biggaboy212/Maclib/releases/latest/download/maclib.txt"))()

-- Create the main window
local Window = MacLib:Window({
    Title = "Night RBX",
    Subtitle = "BETA | V0.1",
    Size = UDim2.fromOffset(868, 650),
    DragStyle = 3, -- Full top-bar dragging for mobile
    DisabledWindowControls = {},
    ShowUserInfo = true,
    Keybind = Enum.KeyCode.RightControl,
    AcrylicBlur = true
})

-- Set config folder
MacLib:SetFolder("NightRBX_Configs")

-- Find the main UI frame dynamically
local mainFrame
task.spawn(function()
    local maxAttempts = 10
    local attempts = 0
    while attempts < maxAttempts do
        for _, obj in pairs(Window.Frame:GetDescendants()) do
            if obj:IsA("Frame") and obj.Size == UDim2.fromOffset(868, 650) then
                mainFrame = obj
                break
            end
        end
        if mainFrame then break end
        attempts += 1
        task.wait(0.1)
    end

    if mainFrame then
        mainFrame.Position = UDim2.new(0.5, -434, 0.5, -325) -- Center based on size
        mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    else
        warn("Could not find main UI frame; positioning and dragging may not work.")
    end
end)

-- Create TabGroup
local TabGroup = Window:TabGroup()

-- Combat Tab
local CombatTab = TabGroup:Tab({
    Name = "Combat"
})
CombatTab:Select() -- Make Combat tab active by default

-- Config Tab
local ConfigTab = TabGroup:Tab({
    Name = "Config"
})

-- Combat Tab Sections
local CombatSections = {
    LeftTop = CombatTab:Section({Side = "Left"}),
    LeftBottom = CombatTab:Section({Side = "Left"}),
    RightTop = CombatTab:Section({Side = "Right"}),
    RightBottom = CombatTab:Section({Side = "Right"})
}

-- Config Tab Section
local ConfigSection = ConfigTab:Section({Side = "Left"})

-- Add Config Settings
ConfigSection:Button({
    Name = "Save Config",
    Callback = function()
        MacLib:SaveConfig("config")
        Window:Notify({
            Title = "Config",
            Description = "Settings saved"
        })
    end
})

ConfigSection:Button({
    Name = "Load Config",
    Callback = function()
        MacLib:LoadConfig("config")
        Window:Notify({
            Title = "Config",
            Description = "Settings loaded"
        })
    end
})

ConfigSection:Button({
    Name = "Refresh Config List",
    Callback = function()
        local configList = MacLib:RefreshConfigList()
        Window:Notify({
            Title = "Config List",
            Description = "Configs: " .. table.concat(configList, ", ")
        })
    end
})

ConfigSection:Button({
    Name = "Load Auto Config",
    Callback = function()
        MacLib:LoadAutoLoadConfig()
        Window:Notify({
            Title = "Auto Load",
            Description = "Autoload config applied"
        })
    end
})

-- Combat Sections Example Elements
CombatSections.LeftTop:Button({
    Name = "Attack",
    Callback = function()
        print("Attacking.")
        Window:Notify({
            Title = "Combat",
            Description = "Attack triggered"
        })
    end
})

CombatSections.LeftBottom:Slider({
    Name = "Attack Range",
    Default = 10,
    Minimum = 5,
    Maximum = 20,
    DisplayMethod = "Percent",
    Callback = function(Value)
        print("Attack range set to: " .. Value)
    end
}, "AttackRange")

CombatSections.RightTop:Toggle({
    Name = "Auto Attack",
    Default = false,
    Callback = function(value)
        Window:Notify({
            Title = "Auto Attack",
            Description = value and "Enabled" or "Disabled"
        })
    end
}, "AutoAttack")

CombatSections.RightBottom:Button({
    Name = "Use Skill",
    Callback = function()
        print("Using skill.")
        Window:Notify({
            Title = "Combat",
            Description = "Skill activated"
        })
    end
})

-- Create Toggle Button for Mobile Players
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Check if ScreenGui already exists and remove it to prevent duplicates
if PlayerGui:FindFirstChild("UIToggleGui") then
    PlayerGui:FindFirstChild("UIToggleGui"):Destroy()
end

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "UIToggleGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = PlayerGui

local ToggleButton = Instance.new("ImageButton")
ToggleButton.Size = UDim2.new(0, 50, 0, 50) -- Circular size
ToggleButton.Position = UDim2.new(0.5, -25, 0, 10) -- Centered at top
ToggleButton.AnchorPoint = Vector2.new(0.5, 0)
ToggleButton.BackgroundTransparency = 0.2
ToggleButton.Parent = ScreenGui

-- Make it circular with UIStroke and UICorner
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(1, 0) -- Full circle
UICorner.Parent = ToggleButton

local UIStroke = Instance.new("UIStroke")
UIStroke.Thickness = 2
UIStroke.Color = Color3.fromRGB(255, 255, 255)
UIStroke.Parent = ToggleButton

ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Gray fill

-- Toggle UI visibility
local uiVisible = true
ToggleButton.MouseButton1Click:Connect(function()
    uiVisible = not uiVisible
    if mainFrame then
        mainFrame.Visible = uiVisible
        ToggleButton.BackgroundColor3 = uiVisible and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(150, 150, 150)
    else
        warn("Main frame not found; UI toggle may not work.")
    end
end)

-- Ensure mobile dragging works
local UserInputService = game:GetService("UserInputService")
local dragging = false -- Fixed: Initialize as false
local dragStart
local startPos

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Touch and input.Position and mainFrame then
        local touchPos = Vector2.new(input.Position.X, input.Position.Y)
        local framePos = mainFrame.AbsolutePosition
        local frameSize = mainFrame.AbsoluteSize
        if touchPos.X >= framePos.X and touchPos.X <= framePos.X + frameSize.X and
           touchPos.Y >= framePos.Y and touchPos.Y <= framePos.Y + 50 then -- Top 50 studs
            dragging = true
            dragStart = touchPos
            startPos = mainFrame.Position
        end
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.Touch and dragStart and startPos and mainFrame then
        local touchPos = Vector2.new(input.Position.X, input.Position.Y)
        local delta = touchPos - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragging = false -- Fixed: Set to false when touch ends
        dragStart = nil
        startPos = nil
    end
end)

-- Initial Config Load (optional)
pcall(function() -- Use pcall to prevent errors if config doesn't exist yet
    MacLib:LoadConfig("config")
end)
